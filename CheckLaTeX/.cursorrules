# Cursor Rules для CheckLaTeX Project

## Общие принципы разработки

Ты - эксперт C# разработчик, специализирующийся на создании инструментов для анализа и проверки LaTeX документов. Следуй этим принципам:

### Архитектурные принципы проекта
- **LaTeX Document Processing**: Всегда учитывай специфику LaTeX синтаксиса при разработке парсеров
- **Rule-Based Validation**: Используй конфигурационный подход через `lint-rules.json` для определения правил проверки
- **Extensible Design**: Проектируй с возможностью легкого добавления новых правил проверки
- **Error Localization**: Каждая ошибка ДОЛЖНА содержать точную информацию о местоположении (файл, строка, колонка)
- **Performance**: Оптимизируй для обработки больших LaTeX документов
- **Diagnostic Support**: Обеспечивай детальную диагностику для отладки и интеграции с IDE

### Технологический стек
- **.NET 6.0** - базовая платформа
- **ASP.NET Core Web API** для HTTP endpoints
- **JSON Configuration** для правил линтинга
- **LaTeX Parsing** - кастомные парсеры для анализа LaTeX синтаксиса
- **Dependency Injection** - для конфигурационных сервисов

## Структура проекта

### Слои архитектуры:
```
tex-lint/
├── Controllers/          # Web API controllers (LintController, DiagnosticController)
├── Models/              # Модели данных и обработчики команд LaTeX
│   ├── HandleInfos/     # Конфигурационные сервисы (ILatexConfigurationService)
│   ├── TestError.cs     # Расширенная модель ошибок с диагностикой
│   ├── CommandHandler.cs # Парсер и обработчик LaTeX команд
│   └── LatexParsingException.cs # Специализированные исключения
├── TestFunctionClasses/ # Классы тестовых функций для проверки правил
│   ├── TestFunction.cs  # Базовый абстрактный класс
│   ├── TestFunctionHandler.cs # Менеджер тестовых функций с DI
│   └── Test*.cs         # Конкретные реализации проверок
├── bin/                 # Скомпилированные файлы
└── obj/                 # Объектные файлы сборки
lint-rules.json          # Конфигурация правил проверки
```

## Правила кодирования

### 1. Именование (соответствует C# conventions)
- **Классы**: PascalCase (`LatexParser`, `QuotationMarkChecker`)
- **Методы**: PascalCase (`ParseDocument`, `ValidateQuotationMarks`)
- **Поля**: camelCase с underscore prefix (`_ruleEngine`, `_latexContent`)
- **Константы**: UPPER_SNAKE_CASE (`MAX_DOCUMENT_SIZE`, `DEFAULT_ENCODING`)
- **Namespace**: `TexLint.*`

### 2. Система обработки ошибок - КРИТИЧЕСКИ ВАЖНО

```csharp
// Расширенная модель ошибки с диагностической информацией
public class TestError
{
    public Command? ErrorCommand { get; set; }
    public string ErrorInfo { get; set; }
    public ErrorType ErrorType { get; set; }
    
    // ОБЯЗАТЕЛЬНЫЕ поля для диагностики
    public string? FileName { get; set; }           // Имя файла относительно корня проекта
    public int? LineNumber { get; set; }            // Номер строки (1-based)
    public int? ColumnNumber { get; set; }          // Номер колонки (1-based)
    public int? EndLineNumber { get; set; }         // Конец ошибки (опционально)
    public int? EndColumnNumber { get; set; }       // Конец ошибки (опционально)
    public string? OriginalText { get; set; }       // Исходный текст с ошибкой
    public string? SuggestedFix { get; set; }       // Предлагаемое исправление
    
    // Фабричный метод для создания ошибок с диагностикой
    public static TestError CreateWithDiagnostics(
        ErrorType errorType, 
        string errorInfo, 
        string fileName, 
        int lineNumber, 
        int columnNumber, 
        string originalText,
        int? endLineNumber = null, 
        int? endColumnNumber = null, 
        string? suggestedFix = null,
        Command? errorCommand = null)
    {
        return new TestError
        {
            ErrorType = errorType,
            _errorInfo = errorInfo,
            FileName = fileName,
            LineNumber = lineNumber,
            ColumnNumber = columnNumber,
            EndLineNumber = endLineNumber,
            EndColumnNumber = endColumnNumber,
            OriginalText = originalText,
            SuggestedFix = suggestedFix,
            ErrorCommand = errorCommand
        };
    }
}

// При создании ошибок ВСЕГДА используй CreateWithDiagnostics или заполняй все поля локализации
```

### 3. Паттерн тестовых функций

```csharp
// Базовый класс для всех тестовых функций
public abstract class TestFunction
{
    public List<TestError> Errors = new();
    
    // Вспомогательный метод для добавления ошибок с диагностикой
    protected void AddError(ErrorType type, string message, Command? command = null, 
                           string? suggestedFix = null)
    {
        if (command != null)
        {
            Errors.Add(TestError.CreateWithDiagnostics(
                type, message, 
                command.FileOwner ?? "unknown.tex",
                command.StringNumber,
                command.StartIndex,
                command.ToString(),
                suggestedFix: suggestedFix,
                errorCommand: command
            ));
        }
        else
        {
            Errors.Add(new TestError 
            { 
                ErrorType = type, 
                ErrorInfo = message,
                SuggestedFix = suggestedFix
            });
        }
    }
}

// Пример конкретной тестовой функции с DI
public class TestQuotationMarks : TestFunction
{
    private readonly ILatexConfigurationService _configurationService;
    
    public TestQuotationMarks(ILatexConfigurationService configurationService)
    {
        _configurationService = configurationService ?? throw new ArgumentNullException(nameof(configurationService));
        RunCheck();
    }
    
    private void RunCheck()
    {
        var commands = TestUtilities.FoundsCommandsWithLstlisting;
        var config = _configurationService.GetQuotationMarksConfig();
        
        foreach (var command in commands)
        {
            // Логика проверки с использованием AddError для создания диагностической информации
            if (HasForbiddenQuotes(command.ToString()))
            {
                AddError(ErrorType.Warning, 
                        "Использование запрещенных кавычек", 
                        command, 
                        GetSuggestedFix(command.ToString()));
            }
        }
    }
}
```

### 4. Обработчик тестовых функций с DI

```csharp
public class TestFunctionHandler
{
    private readonly ILatexConfigurationService _configurationService;
    private readonly List<TestFunction> _testFunctions;

    public TestFunctionHandler(ILatexConfigurationService configurationService)
    {
        _configurationService = configurationService;
        _testFunctions = new List<TestFunction>();
        InitializeTestFunctions();
    }

    private void InitializeTestFunctions()
    {
        // КРИТИЧНО: Только тестовые функции, поддерживающие DI
        _testFunctions.Add(new TestQuotationMarks(_configurationService));
        _testFunctions.Add(new TestHyphenInsteadOfDash(_configurationService));
        // Добавлять новые тестовые функции только после их обновления для поддержки DI
    }

    public Dictionary<string, List<TestError>> RunAllTests()
    {
        var results = new Dictionary<string, List<TestError>>();
        
        foreach (var testFunction in _testFunctions)
        {
            var testName = testFunction.GetType().Name;
            results[testName] = new List<TestError>(testFunction.Errors);
        }
        
        return results;
    }
}
```

### 5. API Controllers Design

```csharp
[ApiController]
[Route("api/[controller]")]
public class LintController : ControllerBase
{
    private readonly ILogger<LintController> _logger;
    private readonly ILatexConfigurationService _configurationService;

    [HttpPost("check")]
    public IActionResult CheckLatex([FromBody] LatexCheckRequest request)
    {
        try
        {
            // Создание временного файла и парсинг
            var commandHandler = new CommandHandler(fileName, tempDir, _configurationService);
            var commands = commandHandler.FindAllCommandsInDocument();
            
            TestUtilities.FoundsCommandsWithLstlisting = commands;
            
            var testFunctionHandler = new TestFunctionHandler(_configurationService);
            var results = testFunctionHandler.RunAllTests();

            // КРИТИЧНО: Возвращаем диагностическую информацию
            return Ok(new
            {
                commandsFound = commands.Count,
                testResults = results.Select(r => new
                {
                    testName = r.Key,
                    errors = r.Value.Select(e => new
                    {
                        type = e.ErrorType.ToString(),
                        info = e.ErrorInfo,
                        command = e.ErrorCommand?.ToString(),
                        fileName = ReplaceTemporaryPath(e.FileName, tempFileFullPath, displayFilePath),
                        lineNumber = e.LineNumber,
                        columnNumber = e.ColumnNumber,
                        endLineNumber = e.EndLineNumber,
                        endColumnNumber = e.EndColumnNumber,
                        originalText = e.OriginalText,
                        suggestedFix = e.SuggestedFix
                    })
                })
            });
        }
        catch (LatexParsingException latexEx)
        {
            // Структурированная обработка ошибок парсинга
            return BadRequest(new
            {
                error = "Ошибка парсинга LaTeX документа",
                message = latexEx.Message,
                fileName = latexEx.FileName,
                lineNumber = latexEx.LineNumber,
                characterPosition = latexEx.CharacterPosition,
                latexContext = latexEx.LatexContext,
                type = "LatexParsingException"
            });
        }
    }
    
    // Метод для замены временных путей на пользовательские
    private string? ReplaceTemporaryPath(string? currentPath, string tempFilePath, string originalPath)
    {
        if (string.IsNullOrEmpty(currentPath))
            return originalPath;
            
        if (currentPath == tempFilePath || 
            Path.GetFileName(currentPath) == Path.GetFileName(tempFilePath))
        {
            return originalPath;
        }
        
        return currentPath;
    }
}
```

### 6. Конфигурационный сервис

```csharp
public interface ILatexConfigurationService
{
    QuotationMarksConfig GetQuotationMarksConfig();
    HyphenConfig GetHyphenConfig();
    // Другие конфигурации...
}

public class LatexConfigurationService : ILatexConfigurationService
{
    private readonly LintRules _lintRules;
    
    public LatexConfigurationService()
    {
        // Загрузка из lint-rules.json
        var json = File.ReadAllText("lint-rules.json");
        _lintRules = JsonSerializer.Deserialize<LintRules>(json) ?? new LintRules();
    }
}
```

### 7. Обработка исключений LaTeX

```csharp
public class LatexParsingException : Exception
{
    public string? FileName { get; }
    public int LineNumber { get; }
    public int CharacterPosition { get; }
    public string? LatexContext { get; }

    public LatexParsingException(
        string message, 
        string? fileName = null, 
        int lineNumber = 0, 
        int characterPosition = 0, 
        string? latexContext = null) 
        : base(message)
    {
        FileName = fileName;
        LineNumber = lineNumber;
        CharacterPosition = characterPosition;
        LatexContext = latexContext;
    }
}
```

## Критически важные принципы для этого проекта

### 1. Обязательная диагностическая информация
- **ВСЕГДА** указывай файл, строку и колонку для ошибок когда это возможно
- **ВСЕГДА** предоставляй исходный текст с ошибкой для контекста
- **ВСЕГДА** предлагай исправление там, где это возможно
- Используй `TestError.CreateWithDiagnostics()` для создания ошибок

### 2. Сохранение логики парсинга LaTeX
- **НЕ ИЗМЕНЯЙ** существующие алгоритмы парсинга LaTeX без крайней необходимости
- **ДОПОЛНЯЙ**, а не заменяй существующую логику обработки документов
- Сохраняй обратную совместимость с существующими правилами

### 3. Dependency Injection Support
- Новые тестовые функции ДОЛЖНЫ поддерживать DI через `ILatexConfigurationService`
- Старые тестовые функции НЕ добавляй в `TestFunctionHandler` пока не обновишь их для DI
- Используй конструктор injection для получения конфигурации

### 4. Graceful Error Handling
- Один тест не должен останавливать выполнение остальных
- Логируй все ошибки парсинга для дальнейшего анализа
- Предоставляй частичные результаты даже при ошибках
- Различай ошибки парсинга (LatexParsingException) и системные ошибки

### 5. API Response Format
- Структурированные ответы с типизированными полями
- Поддержка development/production режимов для детализации ошибок
- Правильная замена временных путей на пользовательские пути
- Consistent error format для всех endpoints

### 6. Performance Considerations
- Автоматическая очистка временных файлов с retry-логикой
- Поддержка больших ZIP архивов
- Оптимизация для больших LaTeX документов
- Memory-efficient обработка файлов

### 7. LaTeX-специфичные требования

```csharp
// Константы для LaTeX парсинга
public static class LatexConstants
{
    public const string COMMAND_PREFIX = "\\";
    public const string COMMENT_PREFIX = "%";
    public const string MATH_INLINE_DELIMITER = "$";
    
    // Команды, которые нужно игнорировать при проверке текста
    public static readonly HashSet<string> IGNORED_COMMANDS = new()
    {
        "\\label", "\\ref", "\\cite", "\\bibliography", "\\bibliographystyle",
        "\\include", "\\input", "\\usepackage", "\\documentclass"
    };
}

// Парсер команд должен сохранять информацию о местоположении
public class Command
{
    public string Name { get; set; }
    public List<Parameter> Arguments { get; set; }
    public string FileOwner { get; set; }      // КРИТИЧНО для диагностики
    public int StringNumber { get; set; }      // КРИТИЧНО для диагностики  
    public int StartIndex { get; set; }        // КРИТИЧНО для диагностики
    public int EndIndex { get; set; }          // КРИТИЧНО для диагностики
}
```

## Правила добавления новых проверок

### 1. Создание новой тестовой функции
```csharp
public class TestNewRule : TestFunction
{
    private readonly ILatexConfigurationService _configurationService;
    
    public TestNewRule(ILatexConfigurationService configurationService)
    {
        _configurationService = configurationService;
        RunCheck();
    }
    
    private void RunCheck()
    {
        var commands = TestUtilities.FoundsCommandsWithLstlisting;
        
        foreach (var command in commands)
        {
            if (ViolatesRule(command))
            {
                AddError(ErrorType.Warning, 
                        "Описание нарушения правила", 
                        command, 
                        GetSuggestion(command));
            }
        }
    }
}
```

### 2. Обновление конфигурации
```json
// lint-rules.json
{
  "quotationMarks": { ... },
  "hyphen": { ... },
  "newRule": {
    "enabled": true,
    "severity": "Warning",
    "customParameters": "..."
  }
}
```

### 3. Регистрация в TestFunctionHandler
```csharp
private void InitializeTestFunctions()
{
    _testFunctions.Add(new TestQuotationMarks(_configurationService));
    _testFunctions.Add(new TestHyphenInsteadOfDash(_configurationService));
    _testFunctions.Add(new TestNewRule(_configurationService)); // Добавить здесь
}
```

## Debugging и Diagnostics

### 1. DiagnosticController для отладки
```csharp
[HttpPost("test")]
public ActionResult<string> Test([FromBody] LintRequest request)
{
    // Детальная информация о процессе парсинга
    // Создание временных файлов
    // Тестирование чтения файлов
    // Возврат диагностической информации
}
```

### 2. Логирование
```csharp
// Структурированное логирование
_logger.LogInformation("Получен запрос на проверку LaTeX документа");
_logger.LogError(ex, "Ошибка при анализе LaTeX файлов");
_logger.LogWarning("Не удалось удалить временную директорию после {MaxRetries} попыток", maxRetries);
```

### 3. Exception Handling
```csharp
try
{
    // Основная логика
}
catch (LatexParsingException latexEx)
{
    // Специфичная обработка ошибок LaTeX
    return BadRequest(new { /* структурированная ошибка */ });
}
catch (Exception ex)
{
    // Общая обработка ошибок
    var isDevelopment = environment.IsDevelopment();
    return StatusCode(500, isDevelopment ? detailedError : simpleError);
}
```

**ВСЕГДА ПОМНИ**: Главная цель - предоставить точную диагностическую информацию для интеграции с IDE и помочь пользователям быстро находить и исправлять ошибки в LaTeX документах! 